Parameters:
  NumberofAZs:
    Type: Number
    AllowedValues:
      - 1
      - 2
    Default: 2
    Description: How many AZ do you want to utilize
  PrivateSubnet:
    Type: String
    AllowedValues:
      - True
      - False
    Default: True
    Description: Do you want to build private subnet
  NumberofPrivateSubnets:
    Type: Number
    AllowedValues:
      - 1
      - 2
    Default: 1
    Description: How many private subnet do you want to create
Conditions:
  Build2Public: !Not [!Equals [!Ref NumberofAZs, 1]]
  Build3Public: !Equals [!Ref NumberofAZs, 3]
  BuildPrivateSubnet: !Equals [!Ref PrivateSubnet, True]
  BuildOnePrivateSubnet: !Equals [!Ref PrivateSubnet, True]
  BuildTwoPrivateSubnet: !And [!Equals [!Ref PrivateSubnet, True], !Equals [!Ref NumberofPrivateSubnets, 2]]
Resources:
  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        TargetCapacity: 2
        LaunchSpecifications:
        - ImageId: ami-0567f647e75c7bc05
          InstanceType: t2.micro
          Placement:
            AvailabilityZone: !Select [ 0, !GetAZs ]
#          SecurityGroups:
#            - GroupId: !GetAtt mySG.GroupId  # this is when you define security group as resource and name is sg11
#          SubnetId: !Ref PublicSubnetA     #When define network interface, cannot define both SG and Subnet
                                            #outside of network interface.
          Monitoring:
            Enabled: true
          NetworkInterfaces:
            - DeviceIndex: 0
              SubnetId: !Ref PublicSubnetA
              Groups:
                - !GetAtt mySG.GroupId
              AssociatePublicIpAddress: true
              DeleteOnTermination: true
        - ImageId: ami-05064bb33b40c33a2
          InstanceType: t2.micro
          Placement:
            AvailabilityZone: !Select [ 1, !GetAZs ]
          Monitoring:
            Enabled: true
          NetworkInterfaces:
            - DeviceIndex: 0
              SubnetId: !Ref PublicSubnetB
              Groups:
                - !GetAtt mySG.GroupId
              AssociatePublicIpAddress: true
              DeleteOnTermination: true
  myVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/21
        Tags:
          - Key: Name     # with this to define vpc name in AWS GUI
            Value: myVPC1
  mySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SG22
      GroupDescription: test security group
      VpcId: !Ref myVPC
  myOwnACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: allow8000
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myOwnACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 172.16.0.0/24
      PortRange:
        From: 8000
        To: 8000
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref myOwnACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: Build2Public
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-B
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildOnePrivateSubnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the second AZ in the list
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildTwoPrivateSubnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-B
  mySubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: BuildTwoPrivateSubnet
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref myOwnACL
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: myVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildPrivateSubnet
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildPrivateSubnet
    Properties:
      Domain: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute1: # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnet
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Private
  PrivateRoute1: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Build2Public
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildOnePrivateSubnet
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildTwoPrivateSubnet
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
